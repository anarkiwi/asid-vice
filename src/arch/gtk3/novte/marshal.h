/* This file is generated by glib-genmarshal, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */
#ifndef ___VTE_MARSHAL_MARSHAL_H__
#define ___VTE_MARSHAL_MARSHAL_H__

#include <glib-object.h>

G_BEGIN_DECLS

/* VOID:INT,INT (marshal.list:1) */
G_GNUC_INTERNAL
void _vte_marshal_VOID__INT_INT (GClosure     *closure,
                                 GValue       *return_value,
                                 guint         n_param_values,
                                 const GValue *param_values,
                                 gpointer      invocation_hint,
                                 gpointer      marshal_data);

/* VOID:OBJECT,OBJECT (marshal.list:2) */
G_GNUC_INTERNAL
void _vte_marshal_VOID__OBJECT_OBJECT (GClosure     *closure,
                                       GValue       *return_value,
                                       guint         n_param_values,
                                       const GValue *param_values,
                                       gpointer      invocation_hint,
                                       gpointer      marshal_data);

/* VOID:STRING,BOXED (marshal.list:3) */
G_GNUC_INTERNAL
void _vte_marshal_VOID__STRING_BOXED (GClosure     *closure,
                                      GValue       *return_value,
                                      guint         n_param_values,
                                      const GValue *param_values,
                                      gpointer      invocation_hint,
                                      gpointer      marshal_data);

/* VOID:STRING,UINT (marshal.list:4) */
G_GNUC_INTERNAL
void _vte_marshal_VOID__STRING_UINT (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);

/* VOID:UINT,UINT (marshal.list:5) */
G_GNUC_INTERNAL
void _vte_marshal_VOID__UINT_UINT (GClosure     *closure,
                                   GValue       *return_value,
                                   guint         n_param_values,
                                   const GValue *param_values,
                                   gpointer      invocation_hint,
                                   gpointer      marshal_data);


G_END_DECLS

#endif /* ___VTE_MARSHAL_MARSHAL_H__ */
